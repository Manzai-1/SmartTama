{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-20b23ed77c0c97d8130e170782a64399ef2b9871",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Tamagochi.sol": "project/contracts/Tamagochi.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/Tamagochi.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\ncontract Tamagochi{\n\n    address private owner; \n    enum TamaStages { Baby, Toddler, Child, Teenager, Adult, Senior, Dead }\n\n    uint tickRate = 5000;\n\n    struct Meal {\n        string name;\n        uint16 points;\n        bool exists;\n    }\n\n    struct TamaCreature {\n        string name;\n        uint16 foodLvl;\n        uint16 happinessLvl;\n        uint lastFed; \n        uint lastPlay; \n        bool exists;\n        TamaStages stage;\n    }\n\n    mapping(string => Meal) public meals;\n    mapping (address => TamaCreature) creatures;\n\n    modifier doesNotExists(bool exists) {\n      require(!exists, \"You can only have one creature\");\n      _;\n    }\n\n    modifier isAlive() {\n        require(\n            creatures[msg.sender].foodLvl != 0 && \n            creatures[msg.sender].happinessLvl != 0 && \n            creatures[msg.sender].stage != TamaStages.Dead,\n            \"Creature is dead! :(\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n\n        meals[\"Kibble\"] = (Meal({\n            name: \"Kibble\",\n            points: 5,\n            exists: true\n        }));\n\n        meals[\"Churro\"] = (Meal({\n            name: \"Churro\",\n            points: 10,\n            exists: true\n        }));\n\n        meals[\"Steak\"] = (Meal({\n            name: \"Steak\",\n            points: 15,\n            exists: true\n        }));\n    }\n\n    function addTama( string memory name) public doesNotExists(creatures[msg.sender].exists) {\n        creatures[msg.sender] = (TamaCreature({\n            name: name,\n            foodLvl: 50,\n            happinessLvl: 50,\n            lastFed: block.timestamp,\n            lastPlay: block.timestamp,\n            exists: true,\n            stage: TamaStages.Baby\n        }));\n    }\n\n    function getMyCreatureName() public  view returns (string memory name){\n        name = creatures[msg.sender].name;\n    }\n\n    function getMyCreatureFoodLvl() public  view returns (uint16 foodLvl){\n        foodLvl = creatures[msg.sender].foodLvl;\n    }\n\n    function getMyCreatureHappinessLvl() public  view returns (uint16 happinessLvl){\n        happinessLvl = creatures[msg.sender].happinessLvl;\n    }\n\n    function getCreatureStage() public view returns(TamaStages){\n        return creatures[msg.sender].stage;\n    }\n\n    function feedMyCreature(string memory meal) public isAlive() {\n        require(meals[meal].exists, \"This food is not available.\");\n\n        creatures[msg.sender].foodLvl += meals[meal].points;\n        calculateStats();\n    }\n\n    function playtime() public isAlive() {\n        require(creatures[msg.sender].happinessLvl != 0, \"Ohno i got bored to death!\");\n        creatures[msg.sender].happinessLvl+=5;\n    \n    }      \n\n    function calculateStats() public isAlive() {\n        creatures[msg.sender].foodLvl -= (uint16((block.timestamp - creatures[msg.sender].lastFed) / tickRate));\n        creatures[msg.sender].happinessLvl -= (uint16((block.timestamp - creatures[msg.sender].lastPlay) / tickRate));\n    }\n\n    function attemptAdvancement() public {\n        bool isFoodFull = creatures[msg.sender].foodLvl >= 100;\n        bool isHappinessFull = creatures[msg.sender].happinessLvl >= 100;\n\n        if(isFoodFull && isHappinessFull) {\n            creatures[msg.sender].stage = TamaStages(uint(creatures[msg.sender].stage) +1);\n            creatures[msg.sender].foodLvl = 50;\n            creatures[msg.sender].happinessLvl = 50;\n        }\n    }\n}"
      }
    }
  }
}